<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->

<project basedir="." default="jar" name="freemarker"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:javacc="http://javacc.dev.java.net/"
         xmlns:docgen="http://freemarker.org/docgen"
         xmlns:bnd="http://www.aqute.biz/bnd"
         xmlns:rat="antlib:org.apache.rat.anttasks"
         xmlns:u="http://freemarker.org/util"
>

    <!-- ================================================================== -->
    <!-- Properties                                                         -->
    <!-- ================================================================== -->

    <!-- Maven project coordinates: -->
    <property name="mavenGroupId" value="org.freemarker"/>
    <property name="mavenArtifactId" value="freemarker-gae"/>
    <!-- Ivy project coordinates: -->
    <property name="moduleOrg" value="org.freemarker"/>
    <property name="moduleName" value="freemarker"/>
    <property name="moduleBranch" value="2.3"/>

    <!-- Will be overidden on the Continous Integration server: -->
    <property name="server.ivy.repo.root" value="${basedir}/build/dummy-server-ivy-repo"/>

    <condition property="has.explicit.boot.classpath.j2se1.5">
        <isset property="boot.classpath.j2se1.5"/>
    </condition>
    <condition property="has.explicit.boot.classpath.j2se1.6">
        <isset property="boot.classpath.j2se1.6"/>
    </condition>
    <condition property="has.explicit.boot.classpath.j2se1.8">
        <isset property="boot.classpath.j2se1.8"/>
    </condition>
    <condition property="has.all.explicit.boot.classpaths">
        <and>
            <isset property="has.explicit.boot.classpath.j2se1.8"/>
        </and>
    </condition>
    <available property="atLeastJDK8" classname="java.util.function.Predicate"/>

    <!-- When boot.classpath.j2se* is missing, these will be the defaults: -->
    <!-- Note: Target "dist" doesn't allow using these. -->
    <property name="boot.classpath.j2se1.5" value="${sun.boot.class.path}"/>
    <property name="boot.classpath.j2se1.6" value="${sun.boot.class.path}"/>
    <property name="boot.classpath.j2se1.8" value="${sun.boot.class.path}"/>

    <!-- For checking the correctness of the boot.classpath.j2se* -->
    <available classpath="${boot.classpath.j2se1.5}"
               classname="java.util.concurrent.ConcurrentHashMap" ignoresystemclasses="true"
               property="boot.classpath.j2se1.5.correct"
    />
    <available classpath="${boot.classpath.j2se1.6}"
               classname="java.util.ServiceLoader" ignoresystemclasses="true"
               property="boot.classpath.j2se1.6.correct"
    />
    <available classpath="${boot.classpath.j2se1.8}"
               classname="java.time.Instant" ignoresystemclasses="true"
               property="boot.classpath.j2se1.8.correct"
    />

    <mkdir dir="build"/>

    <property name="dist.dir" value="target"/>

    <!-- ================================================================== -->
    <!-- Initialization                                                     -->
    <!-- ================================================================== -->


    <target name="clean" description="get rid of all generated files">
        <delete dir="build"/>
        <delete dir="META-INF"/>
    </target>

    <condition property="deps.available">
        <available file=".ivy"/>
    </condition>

    <target name="init"
            description="Fetch dependencies if any are missing and create the build directory if necessary"
    >
        <mkdir dir="target"/>
    </target>

    <property name="ivy.install.version" value="2.4.0"/>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <target name="download-ivy">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <!-- ================================================================= -->
    <!-- Compilation                                                       -->
    <!-- ================================================================= -->

    <target name="javacc" depends="init" unless="parser.uptodate"
            description="Build the parser from its grammar file"
    >
        <ivy:cachepath conf="parser" pathid="ivy.dep"/>
        <taskdef name="generate" classname="org.apache.tools.ant.taskdefs.optional.javacc.JavaCC"
                 uri="http://javacc.dev.java.net/"
                 classpathref="ivy.dep"
        />

        <property name="_javaccOutputDir"
                  value="target/generated-sources/java/freemarker/core/"
        />
        <property name="_freemarkerCoreDir"
                  value = "src/main/java/freemarker/core/"/>

        <mkdir dir="${_javaccOutputDir}"/>
        <ivy:retrieve conf="parser" pattern="target/javacc-home.tmp/[artifact].[ext]"/>
        <javacc:generate
                target="src/main/javacc/FTL.jj"
                outputdirectory="${_javaccOutputDir}"
                javacchome="target/javacc-home.tmp"
        />
        <delete dir="target/javacc-home.tmp"/>

        <replace
                file="${_javaccOutputDir}/FMParser.java"
                token="private final LookaheadSuccess"
                value="private static final LookaheadSuccess"
        />
        <replace
                file="${_javaccOutputDir}/FMParserConstants.java"
                token="public interface FMParserConstants"
                value="interface FMParserConstants"
        />
        <replace
                file="${_javaccOutputDir}/FMParserTokenManager.java"
                token="public class FMParserTokenManager"
                value="class FMParserTokenManager"
        />
        <replace
                file="${_javaccOutputDir}/Token.java"
                token="public class Token"
                value="class Token"
        />
        <replace
                file="${_javaccOutputDir}/SimpleCharStream.java"
                token="public final class SimpleCharStream"
                value="final class SimpleCharStream"
        />
        <replace
                file="${_javaccOutputDir}/FMParser.java"
                token="enum"
                value="ENUM"
        />

        <!-- As we have a modified version in src/main/java: -->
        <!--<move-->
                <!--file="${_javaccOutputDir}/FMParser.java"-->
                <!--tofile="${_javaccOutputDir}/FMParser.java.ignore"-->
        <!--/>-->
        <!--<move-->
                <!--file="${_javaccOutputDir}/FMParserConstants.java"-->
                <!--tofile="${_javaccOutputDir}/FMParserConstants.java.ignore"-->
        <!--/>-->
        <!--<move-->
                <!--file="${_javaccOutputDir}/FMParserTokenManager.java"-->
                <!--tofile="${_javaccOutputDir}/FMParserTokenManager.java.ignore"-->
        <!--/>-->
        <!--<move-->
                <!--file="${_javaccOutputDir}/Token.java"-->
                <!--tofile="${_javaccOutputDir}/Token.java.ignore"-->
        <!--/>-->
        <!--<move-->
                <!--file="${_javaccOutputDir}/SimpleCharStream.java"-->
                <!--tofile="${_javaccOutputDir}/SimpleCharStream.java.ignore"-->
        <!--/>-->
        <!--<move-->
                <!--file="${_javaccOutputDir}/ParseException.java"-->
                <!--tofile="${_javaccOutputDir}/ParseException.java.ignore"-->
        <!--/>-->
        <!--<move-->
                <!--file="${_javaccOutputDir}/TokenMgrError.java"-->
                <!--tofile="${_javaccOutputDir}/TokenMgrError.java.ignore"-->
        <!--/>-->
    </target>

    <target name="_autoget-deps" unless="deps.available">
        <antcall target="update-deps"/>
    </target>

    <target name="update-deps"
            description="Gets the latest version of the dependencies from the Web"
    >
        <echo>Getting dependencies...</echo>
        <echo>-------------------------------------------------------</echo>
        <ivy:settings id="remote" url="https://freemarker.apache.org/repos/ivy/ivysettings-remote.xml"/>
        <!-- Build an own repository that will serve us even offline: -->
        <ivy:retrieve settingsRef="remote" sync="true"
                      ivypattern=".ivy.part/repo/[organisation]/[module]/ivy-[revision].xml"
                      pattern=".ivy.part/repo/[organisation]/[module]/[artifact]-[revision].[ext]"
        />
        <echo>-------------------------------------------------------</echo>
        <echo>*** Successfully acquired dependencies from the Web ***</echo>
        <echo>Eclipse users: Now right-click on ivy.xml and Resolve!</echo>
        <echo>-------------------------------------------------------</echo>
        <!-- Only now that we got all the dependencies will we delete anything. -->
        <!-- Thus a net or repo outage doesn't left us without the dependencies. -->

        <!-- Save the resolution cache from the soon coming <delete>: -->
        <move todir=".ivy.part/update-deps-reso-cache">
            <fileset dir=".ivy/update-deps-reso-cache"/>
        </move>
        <!-- Drop all the old stuff: -->
        <delete dir=".ivy"/>
        <!-- And use the new stuff instead: -->
        <move todir=".ivy">
            <fileset dir=".ivy.part"/>
        </move>
    </target>
</project>
